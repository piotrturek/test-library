require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe Library::BooksController, type: :controller do

  before(:each) do
    user_sign_in
  end 

  describe "CRUD for library_books" do

    context "CREATE for valid attributes" do

      it "create action should give new library_book" do
        expect {
          post :create, params: {library_book: attributes_for(:library_book)}
        }.to change(Library::Book, :count).by(1)
        book = assigns(:library_book)
        expect(book.valid?).to be
        expect(response).to redirect_to(library_book_path(book))
      end

      it "POST #create with invalid params and returns a success response (i.e. to display the 'new' template)" do
        post :create, params: {library_book: attributes_for(:library_book, {lead: ''})}
        expect(response).to be_success
      end

    end

    context "SHOW / UPDATE / EDIT / DESTROY => " do
      before(:each) do
        @book = FactoryBot.create(:library_book)
      end

      it "GET #index and returns a success response" do
        get :index
        books = assigns(:library_books)
        assert_equal Library::Book.all.count, books.count
        expect(response).to be_success
      end

      it "destroy and redirect to library_books list" do
        expect {
          post :destroy, params: {id: @book}
        }.to change(Library::Book, :count).by(-1)
        expect(response).to redirect_to(library_books_path)
      end

      it "GET #show and returns a success response" do
        get :show, params: {id: @book.to_param}
        expect(response).to be_success
      end

      it "GET #new and returns a success response" do
        get :new, params: {}
        expect(response).to be_success
      end

      it "GET #edit and returns a success response" do
        get :edit, params: {id: @book.to_param}
        expect(response).to be_success
      end


      it "PUT #update with valid params" do
        put :update, params: {id: @book.to_param, library_book: attributes_for(:library_book)}
        @book.reload
        expect(response).to redirect_to(@book)
      end
      
      it "PUT #update with invalid params returns a success response (i.e. to display the 'edit' template)" do
        put :update, params: {id: @book.to_param, library_book: attributes_for(:library_book, {lead: ''})}
        assert_template :edit
        expect(response).to be_success
      end


      it "borrow book and redirect" do
        get :borrow_book, params: {id: @book}
        expect(flash[:notice]).to match(/wypożyczona/)
        expect(response).to redirect_to(@book)
      end


      describe "with borrowed book" do

        before(:each) do
          @borrowed_book = FactoryBot.create(:library_book, :borrowed)
        end

        it "return book and redirect" do
          get :return_book, params: {id: @borrowed_book}
          expect(flash[:notice]).to match(/zwrócona/)
          expect(response).to redirect_to(@borrowed_book)
        end

        it "try borrow book but redirect to books list" do
          get :borrow_book, params: {id: @borrowed_book}
          expect(flash[:alert]).to match(/niedostępna/)
          expect(response).to redirect_to(library_books_url)
        end

      end

      it "DELETE #destroy and destroys the requested library_book" do
        expect {
          delete :destroy, params: {id: @book.to_param}
        }.to change(Library::Book, :count).by(-1)
      end

      it "DELETE #destroy and redirects to the library_books list" do
        delete :destroy, params: {id: @book.to_param}
        expect(response).to redirect_to(library_books_url)
      end


    end


  end


end
